digraph classes{
fontname = "Courier New"
fontsize = 10
splines=ortho;
node [
fontname = "Courier New"
fontsize = 10
shape = "record"
]
edge [
fontname = "Courier New"
fontsize = 10
]
TechnicalReport [
label = "{TechnicalReport| refNo: String\l|# printRefNo(): void\l+ printInfo(): void\l+ authorizedLoan(user: User): boolean\l+ getRefNo(): String\l+ TechnicalReport(auth: String, ref: String, tit: String)\l}"
]
InternalUser [
label = "{InternalUser| internalld: String\l|+ authorizedUser(): boolean\l+ InternalUser(addr: String, name: String, id: String, phone: String)\l}"
]
Journal [
label = "{Journal||+ Journal(tit: String)\l+ authorizedLoan(user: User): boolean\l}"
]
Book [
label = "{Book||+ printInfo(): void\l+ Book(tit: String, auth: String, isbn: String)\l}"
]
Main [
label = "{Main|@ lib: Library\l|@+ printHeader(): void\l@+ rmDoc(cmd: String): void\l@+ isHolding(cmd: String): void\l@+ printDoc(cmd: String): void\l@+ printUser(cmd: String): void\l@+ addReport(cmd: String): void\l@+ rmUser(cmd: String): void\l@+ getArgs(cmd: String): Array1[String]\l@+ dispatchCommand(cmd: String): void\l@+ searchDoc(cmd: String): void\l@+ addUser(cmd: String): void\l@+ addBook(cmd: String): void\l@+ returnDoc(cmd: String): void\l@+ addintUser(cmd: String): void\l@+ main(arg: String): void\l@+ addJournal(cmd: String): void\l@+ borrowDoc(cmd: String): void\l@+ searchUser(cmd: String): void\l}"
]
User [
label = "{User| loans: Collection\l userCode: int\l@ nextUserCodeAvailable: int\l phoneNumber: String\l address: String\l fullName: String\l|+ getAddress(): String\l+ User(name: String, phone: String, addr: String)\l+ equals(obj: object): boolean\l+ numberOfLoans(): int\l+ getCode(): int\l+ getPhone(): String\l+ getName(): String\l+ addLoan(loan: Loan): void\l+ authorizedUser(): boolean\l+ removeLoan(loan: Loan): void\l+ printInfo(): void\l}"
]
Document [
label = "{Document| documentCode: int\l@ nextDocumentCodeAvailable: int\l ISBNCode: String\l loan: Loan\l title: String\l authors: String\l|# printAvailability(): void\l+ getBorrower(): User\l+ Document(tit: String)\l+ equals(obj: object): boolean\l# printAuthors(): void\l+ isOut(): boolean\l+ getCode(): int\l# printGeneralInfo(): void\l+ addLoan(ln: Loan): void\l+ isAvailable(): boolean\l+ removeLoan(): void\l+ getAuthors(): String\l+ getTitle(): String\l+ getISBN(): String\l+ printInfo(): void\l# printHeader(): void\l+ authorizedLoan(user: User): boolean\l}"
]
Library [
label = "{Library| documents: Map\l users: Map\l! MAX_NUMBER_OF_LOANS: int\l loans: Collection\l|+ returnDocument(doc: Document): boolean\l+ getDocument(docCode: int): Document\l+ searchUser(name: String): List\l+ removeUser(userCode: int): boolean\l+ searchDocumentByISBN(isbn: String): int\l+ printAllLoans(): void\l- removeLoan(loan: Loan): void\l+ searchDocumentByAuthors(authors: String): List\l+ getUser(userCode: int): User\l+ borrowDocument(doc: Document, user: User): boolean\l+ removeDocument(docCode: int): boolean\l+ isHolding(user: User, doc: Document): boolean\l+ addUser(user: User): boolean\l+ addDocument(doc: Document): boolean\l- addLoan(loan: Loan): void\l+ printDocumentInfo(doc: Document): void\l+ printUserInfo(user: User): void\l+ searchDocumentByTitle(title: String): List\l}"
]
Loan [
label = "{Loan| document: Document\l user: User\l|+ getDocument(): Document\l+ getUser(): User\l+ print(): void\l+ equals(obj: object): boolean\l+ Loan(doc: Document, usr: User)\l}"
]
edge[arrowhead = "empty"; style = "dashed"]
edge[arrowhead = "empty"; style= "solid"]
Book -> Document;
Journal -> Document;
TechnicalReport -> Document;
InternalUser -> User;
edge[arrowhead = "open"; style = "solid"]
Library -> Loan;
Main -> Library;
Document -> Loan;
Library -> User;
User -> Loan;
Loan -> User;
Loan -> Document;
Library -> Document;
edge[arrowhead = "open"; style = "dashed"]
Document -> User;
Main -> Document;
Main -> User;
User -> Document;
}